<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.savorgames.dao.TopicDao">
  <!-- 通过主题ID查找 -->
  <resultMap type="com.savorgames.dao.dto.TopicAndMemberAndNode" id="topicAndTagAndNode">
    <result column="tid" property="topicId"/>
    <result column="title" property="topicTitle"/>
    <result column="created" property="topicDate"/>
    <result column="rank" property="topicRank"/>
    <result column="looks" property="topicLooks"/>
    <result column="replys" property="topicReplys"/>
    <result column="content" property="topicContent"/>
    
    <result column="nid" property="nodeId"/>
    <result column="n_name" property="nodeName"/>
    
    <result column="uid" property="memberId"/>
    <result column="nickname" property="memberNickname"/>
    <result column="avatar" property="memberAvatar"/>
  </resultMap> 
  <select id="findOneTopicById" resultMap="topicAndTagAndNode" parameterType="long">
    SELECT t.title, t.tid, t.content,t.created,t.rank,t.replys,t.looks,u.nickname,u.uid,u.avatar,n.nid,n.n_name 
    FROM `user` AS u ,topic AS t ,node AS n 
    WHERE t.tid = #{tid} AND t.uid = u.uid AND t.nid = n.nid
  </select>
  <!-- 更新主题点击次数 -->
  <update id="updateTopicLooksById" parameterType="long">
  	UPDATE topic SET looks = looks + 1 WHERE tid = #{id}
  </update>
  <!--更新评论数	-->
  <update id="updateTopicReplysByTid" parameterType="long">
  	UPDATE topic SET replys = replys + 1 WHERE tid = #{tid}
  </update>
  <update id="updateTopicRankByTid" parameterType="long">
  	UPDATE topic SET rank = rank + 1 WHERE tid = #{tid}
  </update>
  <!-- 
  	插入一条主题 
  	注意：这里表设计有问题，例如 create delete 关键字 需要重新设计
  	804数据库已经变为mysql
  -->
  <insert id="insertAndGetTid" parameterType="com.savorgames.entity.Topic" useGeneratedKeys="true" keyProperty="tid">
	INSERT INTO topic(uid,nid,tag_id,created,title,content,rank,looks,replys,status) VALUES(#{uid},#{nid},#{tagId},#{created},#{title},#{content},#{rank},#{looks},#{replys},#{status})
  </insert>
  
  <!-- 更新主题为删除状态 -->
  <update id="updateTopicIsDeleteById" parameterType="com.savorgames.entity.Topic">
  	UPDATE topic SET status = #{status} WHERE tid = #{tid}
  </update>
  
  <update id="updateStatusIsDelByTid" parameterType="long">
  	UPDATE topic SET status = 1 WHERE tid = #{tid}
  </update>
  
<!--   <update id="updateStatusIsDelByTid" parameterType="long">
  	UPDATE topic SET nid = #{1} WHERE nid = #{0}
  </update> -->
  
  <!-- 彻底删除主题 -->
  <delete id="deleteTopicById" parameterType="long">
    DELETE FROM topic WHERE tid = #{tid}
  </delete>
  
  <!-- 按照帖子ID和用户ID查询 -->
  <select id="findTopicByTidAndUid" resultType="com.savorgames.entity.Topic">
    SELECT * FROM topic WHERE tid=#{0} AND uid=#{1}
  </select>
  
  <!-- 更新帖子的节点和内容 -->
  <update id="updateTopicNilOrContent" parameterType="com.savorgames.entity.Topic">
  	UPDATE topic SET nid = #{nid},content = #{content} WHERE tid = #{tid}
  </update>
    <!-- 更新帖子的节点 -->
  <update id="updateTopicNidByTid" parameterType="long">
  	UPDATE topic SET nid = #{1} WHERE tid = #{0}
  </update>
    <!-- 更新帖子的内容 -->
  <update id="updateTopicContentByTid" parameterType="com.savorgames.entity.Topic">
  	UPDATE topic SET content = #{1} WHERE tid = #{0}
  </update>
  
  <select id="findLastTopicByAllNodes" resultType="com.savorgames.entity.Topic">
  	select tid,title,nid from topic where tid in (select MAX(tid) AS tid from topic, (select nid from node) as node where topic.nid = node.nid GROUP BY node.nid)
  </select>
  
  <resultMap type="com.savorgames.dao.dto.TopicDaoDto" id="rankTopics">    
    <result column="tid" property="topicId"/>
    <result column="uid" property="memberId"/>
    <result column="title" property="topicTitle"/>
    <result column="nickname" property="memberNickname"/>
    <result column="avatar" property="memberAvatar"/>
  </resultMap> 
  <select id="find3Day20TopicByRank" resultMap="rankTopics">
    SELECT t.tid,t.title,t.uid,u.nickname,u.avatar FROM `topic` AS t ,`user` AS u where t.created > DATE_SUB(now(),INTERVAL 7 DAY) AND t.uid = u.uid AND t.status = 0 ORDER BY t.rank DESC LIMIT 20
  </select>
  
  <select id="select7Daytopis" resultType="java.util.Map">
  	SELECT t.tid AS topicId,t.title AS topicTitle,t.uid AS memberId,u.nickname AS memberNickname,u.avatar AS memberAvatar,t.created,t.rank FROM `topic` AS t ,`user` AS u where t.created > DATE_SUB(now(),INTERVAL 7 DAY) AND t.uid = u.uid AND t.status = 0 LIMIT 56
  </select>
  
  <select id="find20TopicByTidDesc" resultMap="rankTopics">
  	SELECT t.tid,t.title,t.uid,u.nickname,u.avatar FROM `topic` AS t ,`user` AS u where t.uid = u.uid AND t.status = 0 ORDER BY t.tid DESC LIMIT 45
  </select>
  
  <select id="selectTopicsByNodeId" resultMap="rankTopics" parameterType="long">
  	SELECT t.tid,t.title,t.uid,u.nickname,u.avatar FROM `topic` AS t ,`user` AS u where t.uid = u.uid AND t.status = 0 AND t.nid = #{0} ORDER BY t.tid DESC LIMIT 45
  </select>
  
  <select id="selectAdminTopicsByPage" resultType="java.util.Map" parameterType="long">
  	SELECT t.tid,t.title,t.created,t.`status`,u.uid,u.nickname,n.nid,n.n_name FROM topic AS t,`user` AS u, node AS n WHERE n.nid = t.nid AND u.uid = t.uid ORDER BY t.tid DESC LIMIT #{0},#{1}
  </select>
  
  <!-- 按照帖子节点查询 并分页 -->
  <select id="selectTopicsByNodeIdByPage" resultType="java.util.Map" parameterType="long">
  	SELECT t.tid,t.title,t.created,t.`rank`,t.replys,u.uid,u.nickname,u.avatar FROM topic AS t,`user` AS u WHERE t.`nid` = #{0} AND t.`uid` = u.`uid` AND t.`status` = 0 ORDER BY t.tid DESC LIMIT #{1},#{2}
  </select>
  
  <select id="selectTopicsByTagIdByPage" resultType="java.util.Map" parameterType="long">
  	select t.tid,t.title,t.created,t.`rank`,t.replys,u.uid,u.nickname,u.avatar from topic as t, `user` AS u, (select tt.topic_id from topic_tags as tt Where tt.tag_id = #{0} ORDER BY tt.topic_id DESC LIMIT #{1},#{2} ) AS tt WHERE t.tid = tt.topic_id AND u.uid = t.uid AND t.`status` = 0
  </select>
  
  <select id="selectTopicsByUser" resultType="java.util.Map" parameterType="long">
  	SELECT t.title,t.tid FROM topic AS t WHERE t.uid = #{0} AND t.status = 0 ORDER BY t.tid DESC LIMIT 20
  </select>
</mapper>